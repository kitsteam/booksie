#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const { execFileSync } = require('child_process');

const buildIndex = () => {
  const index = 'dist/index.html';
  fs.mkdirSync(path.dirname(index), { recursive: true });
  fs.writeFileSync(index, generateIndex());
};

const cache = func => (...args) => {
  const cache = path.join(
    'cache',
    `${func.name}(${JSON.stringify(args).replace(/^\[(.*)]$/, '$1')})`
  );
  if (!fs.existsSync(cache)) {
    fs.mkdirSync(path.dirname(cache), { recursive: true });
    fs.writeFileSync(cache, JSON.stringify(func(...args)));
  }
  return JSON.parse(fs.readFileSync(cache, 'utf8'));
};

const fetchBooks = () =>
  JSON.parse(
    execFileSync('curl', [
      '-Lf',
      '--retry',
      2,
      'https://data.booksie.org/books.json',
    ])
  );

const generateBook = book => replaceTokens(readInclude('book'), book);

const generateBooks = () =>
  cache(fetchBooks)()
    .sort((a, b) => -a.created.localeCompare(b.created))
    .map(book => generateBook(book).trim())
    .join('');

const generateIndex = () =>
  readInclude('header') +
  generateStyles() +
  generateBooks() +
  readInclude('footer');

const generateStyles = () =>
  `<style>${fs
    .readdirSync('styles')
    .map(filename => fs.readFileSync(path.join('styles', filename), 'utf8'))
    .join('')
    .replace(/\s+/g, ' ')
    .trim()}</style>
`;

const main = () => buildIndex();

const readInclude = name =>
  fs.readFileSync(path.join('includes', `${name}.html`), 'utf8');

const replaceTokens = (string, replacements) =>
  Object.entries(replacements).reduce(
    (string, [token, replacement]) =>
      string.replace(new RegExp(`\\{${token}}`, 'g'), replacement),
    string
  );

require.main === module && main();
