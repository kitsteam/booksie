#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const { execFileSync } = require('child_process');
const {
  cachePath,
  distributionPath,
  fetchURL,
  makeDirectories,
} = require('booksie-data');

const buildIndex = () =>
  fs.writeFileSync(
    makeDirectories(distributionPath('index.html')),
    generateIndex()
  );

const cache = func => (...args) => {
  const cache = cachePath(
    `${func.name}(${JSON.stringify(args).replace(/^\[(.*)]$/, '$1')})`
  );
  fs.existsSync(cache) ||
    fs.writeFileSync(makeDirectories(cache), JSON.stringify(func(...args)));
  return JSON.parse(fs.readFileSync(cache, 'utf8'));
};

const fetchBooks = () =>
  JSON.parse(fetchURL('https://data.booksie.org/books.json'));

const generateBook = book =>
  replaceTokens(readInclude('book'), {
    ...book,
    cover: cache(generateCoverURL)(book.source, book.slug),
  });

const generateBooks = () =>
  (process.env.CI ? func => func : cache)(fetchBooks)()
    .sort((a, b) => -a.created.localeCompare(b.created))
    .map(book => generateBook(book).trim())
    .join('');

const generateCoverURL = (source, slug) =>
  `data:image/jpeg;base64,${execFileSync(
    'convert',
    ['-resize', '256x256>', '-', '-'],
    {
      input: fetchURL(
        `https://data.booksie.org/${encodeURIComponent(
          source
        )}/${encodeURIComponent(slug)}.jpg`,
        undefined,
        true
      ),
    }
  ).toString('base64')}`;

const generateIndex = () =>
  readInclude('header') +
  generateStyles() +
  generateBooks() +
  readInclude('footer');

const generateStyles = () =>
  `<style>${fs
    .readdirSync('styles')
    .map(filename => fs.readFileSync(path.join('styles', filename), 'utf8'))
    .join('')
    .replace(/\s+/g, ' ')
    .trim()}</style>
`;

const main = () => buildIndex();

const readInclude = name =>
  fs.readFileSync(path.join('includes', `${name}.html`), 'utf8');

const replaceTokens = (string, replacements) =>
  Object.entries(replacements).reduce(
    (string, [token, replacement]) =>
      string.replace(new RegExp(`\\{${token}}`, 'g'), replacement),
    string
  );

require.main === module && main();
